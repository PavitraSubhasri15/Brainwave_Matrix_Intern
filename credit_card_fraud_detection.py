# -*- coding: utf-8 -*-
"""CREDIT_CARD_FRAUD_DETECTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Dgj7Pkc19jTjRcvEAXo8hHLDMW3tRvw
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from imblearn.combine import SMOTETomek
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, precision_recall_curve, roc_curve

# Load Data
df = pd.read_csv('/content/creditcard.csv')

# Drop missing (if any)
df = df.dropna(subset=['Class'])

# Features and Target
X = df.drop('Class', axis=1)
y = df['Class']

# Stratified Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, stratify=y, random_state=42
)

# Handle Imbalance
smote_tomek = SMOTETomek(random_state=42)
X_train_res, y_train_res = smote_tomek.fit_resample(X_train, y_train)

# ðŸ’¡ Manually Optimized Random Forest (Not GridSearch)
rf_model = RandomForestClassifier(
    n_estimators=100,         # Can increase to 200 if needed
    max_depth=10,             # Limit depth to avoid overfitting
    min_samples_split=10,     # Require more samples to split
    min_samples_leaf=5,       # Prevent overfitting small patterns
    class_weight='balanced',  # Handle imbalance
    random_state=42,
    n_jobs=-1                 # Use all cores
)

# Train on 50% of the resampled data
X_train_half = X_train_res.sample(frac=0.5, random_state=42)
y_train_half = y_train_res.loc[X_train_half.index]

rf_model.fit(X_train_half, y_train_half)


# Predictions and Threshold Tuning
proba_preds = rf_model.predict_proba(X_test)[:, 1]

fpr, tpr, thresholds = roc_curve(y_test, proba_preds)
j_scores = tpr - fpr
best_thresh = thresholds[np.argmax(j_scores)]

final_preds = (proba_preds >= best_thresh).astype(int)

# Evaluation
print("\nClassification Report:\n", classification_report(y_test, final_preds))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, final_preds))
print("ROC AUC Score:", roc_auc_score(y_test, proba_preds))

plt.figure(figsize=(6,4))
plt.plot(fpr, tpr, label='ROC curve')
plt.plot([0,1], [0,1], linestyle='--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.grid()
plt.show()



